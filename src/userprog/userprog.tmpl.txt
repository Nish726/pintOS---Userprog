		     +--------------------------+
       	     |		In22-S3-CS 2043	    |
		     | PROJECT 2: USER PROGRAMS	|
		     | 	   DESIGN DOCUMENT     	|
		     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

- Nishan Kavinda <nishan.22@cse.mrt.ac.lk>
- Index No: 220315R

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

	https://slideplayer.com/slide/7988080/
	https://youtu.be/dQyvVZzTV5E

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ---------------------------------------------------------

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

	- In process.c
	---------------------------------------------------------------------------
	static void start_process (void *file_name_)
	load (const char *file_name_, void (**eip) (void), void **esp)
	static bool setup_stack (void **esp, const char *file_name_)
	# here, I used file_name_ to pass the string of arguments to functions.
	---------------------------------------------------------------------------

	- start_process: Initializes a new user process with the given executable name.
	- load: Loads the executable into memory, setting up the entry point and stack pointer.
	- setup_stack: Prepares the initial user stack with the program's arguments.

---- ALGORITHMS ----------------------------------------------------------------

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

	The argument parsing implementation involves the following steps:
	1. Receiving Arguments: 
		The process_execute() function receives the command-line arguments 
		as a single string (file_name).
		
	2. Tokenization: 
		The setup_stack() function uses strtok_r() to split the command 
		string into individual arguments based on spaces.

	3. Stack Preparation:
		- Reversing Arguments: To maintain the correct order, arguments 
		  are pushed onto the stack in reverse.
		- Alignment: The stack pointer is aligned to a multiple of four 
		  bytes to adhere to calling conventions.
		- Storing Pointers: Pointers to each argument string are stored on the stack.
		- Final Pointers: A null pointer is added to signify the end of the arguments array, 
		  followed by the address of argv and the argument count argc.


	Here's an example code snippet that demonstrates how to use malloc() for argument parsing:

	#include <stdio.h>
	#include <stdlib.h>
	#include <string.h>

	int main(int argc, char *argv[]) {
		char **args = malloc(argc * sizeof(char *));
		int i;

		for (i = 0; i < argc; i++) {
			args[i] = malloc(strlen(argv[i]) + 1);
			strcpy(args[i], argv[i]);
		}

		// Use args array here

		for (i = 0; i < argc; i++) {
			free(args[i]);
		}
		free(args);

		return 0;
	}

---- RATIONALE ----------------------------------------------------------------

>> A3: Why does Pintos implement strtok_r() but not strtok()?

	Pintos implements strtok_r() instead of strtok() to ensure thread safety. 
	Unlike strtok(), which uses a static buffer and is therefore unsafe in a 
	multi-threaded environment, strtok_r() maintains context using a user-provided saveptr. 
	This allows multiple threads to tokenize strings concurrently without interfering with each other's state.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

	Advantages of Unix Approach
	---------------------------------------------------------------------------
	1. Flexibility:
		- Shell Features: 
			Unix shells interpret and expand arguments using wildcards, 
			environment variables, and other mechanisms, allowing for more 
			dynamic and powerful command execution.
		- Redirection and Piping: 
			The shell handles input/output redirection and piping between 
			commands, facilitating complex workflows.

	2. User Customization:
		- Shell Scripting: 
			Users can create shell scripts to automate tasks, enabling the 
			construction of custom command sequences tailored to specific needs.
		- Environment Configuration:
			Users can customize their shell environment (aliases, functions, variables), 
			enhancing productivity and user experience.

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

	There are no new or changed struct or struct member, 
	global or static variable, typedef, or enumeration 
	declarations in the userprog.tmpl.txt file.

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

	In Pintos, file descriptors are managed on a per-process basis. 
	Each process maintains its own file descriptor table, where each 
	entry corresponds to an open file. When a file is opened using 
	syscall_open(), a new file descriptor is assigned and added to 
	the process's table. File descriptors are unique within a single 
	process but can be duplicated across different processes. This 
	design ensures isolation between processes while allowing 
	efficient access to open files.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

	Reading and writing user data from the kernel involve careful 
	validation and safe memory access:
	---------------------------------------------------------------------------
	1. Validation:
		- validate_ptr(): Ensures that the pointer is within the 
		  user address space and is mapped.
		- validate_str(): Validates that a string pointer points to a 
		  valid, null-terminated string.
		- validate_buffer(): Checks that a buffer of a given size is 
		  entirely within the user address space.

	2. Data Access:
		- get_user() and put_user(): Safely copy data between user 
		  and kernel spaces, handling potential invalid memory 
		  accesses gracefully.

	--------------------------------------------------------------------------
	Writing to a File Descriptor:
	In syscall.c
	---------------------------------------------------------------------------
	static int syscall_write(int fd, const void *buffer, unsigned size) {
    validate_buffer(buffer, size);
    
    struct file_descriptor *fd_struct = get_from_fd(fd);
		if (fd_struct == NULL) {
			return ERROR_STATUS;
		}
		
		lock_acquire(&file_system_lock);
		int bytes_written = file_write(fd_struct->_file, buffer, size);
		lock_release(&file_system_lock);
    
		return bytes_written;
	}
	---------------------------------------------------------------------------

	Here's an example code snippet that demonstrates how to use 
	get_user() and put_user() to read and write user data from the kernel:
	to read and write user data from the kernel:

	#include "userprog/syscall.h"
	#include "userprog/pagedir.h"
	#include "threads/vaddr.h"

	int get_user(const uint8_t *uaddr) {
		int result;
		if (!is_user_vaddr(uaddr) || pagedir_get_page(thread_current()->pagedir, uaddr) == NULL) {
			return -1;
		}
		asm ("movl $1f, %0; movzbl %1, %0; 1:" : "=&a" (result) : "m" (*uaddr));
		return result;
	}

	int put_user(uint8_t *udst, uint8_t byte) {
		if (!is_user_vaddr(udst) || pagedir_get_page(thread_current()->pagedir, udst) == NULL) {
			return -1;
		}
		asm ("movl $1f, %0; movb %b2, %1; 1:" : "=&a" (byte), "=m" (*udst) : "q" (byte));
		return 0;
	}

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

	Full Page (4,096 bytes):
		- Least Inspections: 1 (if the entire page is contiguous and mapped).
		- Greatest Inspections: 4,096 (if each byte resides on a different page).

	Partial Data (2 bytes):
		- Least Inspections: 1 (both bytes on the same page).
		- Greatest Inspections: 2 (bytes on different pages).

	Improvements:
		- Batch Validation: Validating entire pages or larger chunks 
		  at once can reduce the number of required inspections.
		- Caching Mechanisms: Implementing caches for recently 
		  accessed pages can minimize redundant inspections.

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

	The wait system call is implemented using semaphores to synchronize 
	parent and child processes. When a parent calls wait(C), it blocks on 
	a semaphore until the child process C terminates. Upon termination, 
	the child signals the semaphore, allowing the parent to resume and 
	retrieve the exit status. This ensures that the parent does not proceed 
	until the child has fully terminated, avoiding race conditions and 
	ensuring resource cleanup.

	---------------------------------------------------------------------------
	Waiting for a Child Process:
	In syscall.c
	---------------------------------------------------------------------------
	static int syscall_wait(tid_t tid) {
		return process_wait(tid);
	}
	---------------------------------------------------------------------------
	In process.c
	---------------------------------------------------------------------------
	int process_wait(tid_t child_tid) {
		struct child_process *child = get_child_process(child_tid);
		if (child == NULL) {
			return ERROR_STATUS;
		}
    
		sema_down(&child->sema);
		int exit_status = child->exit_status;
		list_remove(&child->elem);
		free(child);
    
		return exit_status;
	}
	---------------------------------------------------------------------------

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

	To manage errors arising from invalid user memory accesses during system calls, 
	Pintos employs a combination of pointer validation and centralized error handling:
	---------------------------------------------------------------------------
	1. Validation Macros:
		- CHECK_USER_PTR(ptr): Validates user pointers and triggers process 
		termination if invalid.

	2. Centralized Termination:
		- exit_process(int status): Handles process termination, ensuring 
		that all allocated resources are freed.
	3. Exception Handling:
		- syscall_handler: Catches exceptions triggered by invalid accesses 
		and invokes exit_process().
	---------------------------------------------------------------------------

	HANDLING INVALID USER BUFFER
	iN SYSCALL.C
	---------------------------------------------------------------------------
	#include "userprog/syscall.h"
	#include "userprog/pagedir.h"
	#include "threads/exception.h"

	#define CHECK_USER_PTR(ptr) \
		do { \
			if (!is_user_vaddr(ptr) || pagedir_get_page(thread_current()->pagedir, ptr) == NULL) { \
				exit_process(-1); \
			} \
		} while (0)

	static void syscall_handler(struct intr_frame *f) {
		int syscall_num = get_user((const uint8_t *) f->esp);

		switch (syscall_num) {
			case SYS_WRITE: {
				int fd = get_user((const uint8_t *) f->esp + 4);
				const void *buf = (const void *) get_user((const uint8_t *) f->esp + 8);
				unsigned size = (unsigned) get_user((const uint8_t *) f->esp + 12);

				CHECK_USER_PTR(buf);

				int bytes_written = write(fd, buf, size);
				f->eax = bytes_written;
				break;
			}
		}
	}

	void exit_process(int status) {
		process_exit();
		thread_exit();
	}
	---------------------------------------------------------------------------

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

	To guarantee that the exec system call does not return before the new 
	executable has finished loading, Pintos utilizes a semaphore:
	---------------------------------------------------------------------------
	1. Semaphore Initialization: Before loading, a semaphore (load_sema) is 
	   initialized to 0.
	2. Child Signaling: The child process signals (sema_up) the semaphore upon 
	   successful or failed loading.
	3. Parent Waiting: The parent process waits (sema_down) on the semaphore, 
	   ensuring it only proceeds after loading completes.
	4. Status Passing: The child communicates the success or failure of loading 
	   through shared data structures before signaling.
	---------------------------------------------------------------------------
	Executing a New Process
	In syscall.c
	---------------------------------------------------------------------------
	static int syscall_exec(const char *file_name_) {
		struct thread *child = process_execute(file_name_);
		if (child == NULL) {
			return ERROR_STATUS;
		}
		
		sema_down(&child->load_sema);
		if (child->load_success) {
			return child->tid;
		} else {
			return ERROR_STATUS;
		}	
	}
	---------------------------------------------------------------------------

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

	To prevent race conditions when a parent process P calls wait(C) before or 
	after the child process C exits, Pintos employs semaphores and specific state 
	management:
	---------------------------------------------------------------------------
	1. Semaphore Usage:
		- Before Exit: If P calls wait(C) before C exits, P blocks on C's 
		  semaphore until C signals completion.
		- After Exit: If C has already exited, the semaphore is already signaled, 
		  allowing P to proceed without blocking.

	2. Resource Cleanup:
		- On Termination: Both parent and child processes ensure that all resources 
		  (memory, file descriptors, etc.) are freed upon termination.

	3. Orphan Processes:
		- If P terminates without waiting, the kernel ensures that C's resources 
		  are cleaned up immediately after C exits.

	4. Special Cases:
		- Multiple Waits: Ensuring that subsequent wait(C) calls after the first 
		  are handled gracefully, typically by returning -1 if already waited.
		- Zombie Processes: Maintaining process states to prevent resource leakage 
		when child processes terminate before being waited on.
	---------------------------------------------------------------------------
	Parent Waiting on Child
	In process.c
	---------------------------------------------------------------------------
	int process_wait(tid_t child_tid) {
		struct child_process *child = get_child_process(child_tid);
		if (child == NULL) {
			return ERROR_STATUS;
		}
		
		sema_down(&child->sema);
		int exit_status = child->exit_status;
		list_remove(&child->elem);
		free(child);
		
		return exit_status;
	}
	---------------------------------------------------------------------------

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

	Pintos accesses user memory from the kernel using the get_user() and 
	put_user() functions:
	---------------------------------------------------------------------------
	- get_user(): Safely reads a byte from user memory, ensuring the 
	  address is valid.
	- put_user(): Safely writes a byte to user memory, validating the 
	  destination address.
	---------------------------------------------------------------------------
	This approach ensures that the kernel does not inadvertently access 
	invalid or unauthorized memory regions, maintaining system stability 
	and security.
	---------------------------------------------------------------------------
	Writing a Byte to User Memory
	In syscall.c
	---------------------------------------------------------------------------	
	int put_user(uint8_t *udst, uint8_t byte) {
		if (!is_user_vaddr(udst) || pagedir_get_page(thread_current()->pagedir, udst) == NULL) {
			return -1;
		}
		asm ("movl $1f, %0; movb %b2, %1; 1:" : "=&a" (byte), "=m" (*udst) : "q" (byte));
		return 0;
	}
	---------------------------------------------------------------------------	

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

	Advantages:
	---------------------------------------------------------------------------
	1. Simplicity: Utilizing an array of struct file pointers indexed by file descriptors 
	provides a straightforward and intuitive mapping between descriptors and open files.
	2. Efficiency: Accessing files via file descriptors allows for constant-time operations 
	using simple array lookups, facilitating fast file I/O operations.
	---------------------------------------------------------------------------
	Disadvantages:
	---------------------------------------------------------------------------
	1. Limited Scalability: The maximum number of open files is constrained by the 
	   size of the file descriptor array, potentially limiting scalability for applications 
	   that require numerous simultaneous file accesses.
	2. Lack of Sharing: File descriptors are managed on a per-process basis, making it 
	   challenging to share open files between processes without additional synchronization mechanisms.
	---------------------------------------------------------------------------

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

	Pintos uses an identity mapping for tid_t (thread ID) to pid_t (process ID), 
	meaning each thread's ID is directly used as its process ID.
	---------------------------------------------------------------------------
	Advantages:
	---------------------------------------------------------------------------
	1. Simplicity: This direct mapping simplifies the implementation of process 
	management, as there is no need for additional translation between thread 
	and process identifiers.
	2. Consistency: Aligning thread IDs with process IDs reduces confusion and 
	potential errors in associating threads with their respective processes.
	---------------------------------------------------------------------------

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
